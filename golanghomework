/*只出现一次的数字：给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。
找出那个只出现了一次的元素。可以使用 for 循环遍历数组，结合 if 条件判断和 map 数据结构来解决，
例如通过 map 记录每个元素出现的次数，然后再遍历 map 找到出现次数为1的元素。*/

package main

import "fmt"

func findSingleNumber(nums []int) int {
    countMap := make(map[int]int)
    
    for _, num := range nums {
        countMap[num]++
    }
    
    for num, count := range countMap {
        if count == 1 {
            return num
        }
    }
    
    return 0 // 如果没有找到只出现一次的数字，返回0（根据题意，这种情况不会发生）
}

func main() {
    nums := []int{4, 1, 2, 1, 2}
    fmt.Println(findSingleNumber(nums)) // 输出应该是 4
}


/*题目：判断一个整数是否是回文数*/
package main

import (
    "fmt"
    "strconv"
)

func isPalindrome(x int) bool {
    // 将整数转换为字符串
    str := strconv.Itoa(x)
    // 获取字符串的长度
    n := len(str)
    
    // 检查字符串是否与其反转形式相同
    for i := 0; i < n/2; i++ {
        if str[i] != str[n-i-1] {
            return false
        }
    }
    
    return true
}

func main() {
    num1 := 121
    num2 := -121
    num3 := 10
    
    fmt.Println(isPalindrome(num1)) // 输出应该是 true
    fmt.Println(isPalindrome(num2)) // 输出应该是 false
    fmt.Println(isPalindrome(num3)) // 输出应该是 false
}

/*题目：给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效 */
package main

import (
    "fmt"
)

func isValid(s string) bool {
    // 创建一个栈
    stack := []rune{}
    // 创建一个映射，用于存储括号的对应关系
    matchingParentheses := map[rune]rune{
        ')': '(',
        '}': '{',
        ']': '[',
    }
    
    // 遍历字符串中的每个字符
    for _, char := range s {
        // 如果字符是左括号，将其压入栈中
        if char == '(' || char == '{' || char == '[' {
            stack = append(stack, char)
        } else {
            // 如果字符是右括号，检查栈是否为空
            if len(stack) == 0 {
                return false
            }
            // 弹出栈顶元素
            top := stack[len(stack)-1]
            stack = stack[:len(stack)-1]
            // 检查弹出的栈顶元素是否与当前右括号匹配
            if matchingParentheses[char] != top {
                return false
            }
        }
    }
    
    // 如果栈为空，说明所有括号都匹配
    return len(stack) == 0
}

func main() {
    s1 := "()"
    s2 := "()[]{}"
    s3 := "(]"
    s4 := "([)]"
    s5 := "{[]}"
    
    fmt.Println(isValid(s1)) // 输出应该是 true
    fmt.Println(isValid(s2)) // 输出应该是 true
    fmt.Println(isValid(s3)) // 输出应该是 false
    fmt.Println(isValid(s4)) // 输出应该是 false
    fmt.Println(isValid(s5)) // 输出应该是 true
}

/*题目： 查找字符串数组中的最长公共前缀 */
package main

import (
    "fmt"
)

func longestCommonPrefix(strs []string) string {
    if len(strs) == 0 {
        return ""
    }
    
    // 假设第一个字符串是最长公共前缀
    prefix := strs[0]
    
    // 遍历字符串数组中的每个字符串
    for _, str := range strs[1:] {
        // 比较当前字符串与当前最长公共前缀
        for i := 0; i < len(prefix); i++ {
            // 如果当前字符不匹配，或者到达了当前字符串的末尾
            if i >= len(str) || prefix[i] != str[i] {
                // 更新最长公共前缀为匹配的部分
                prefix = prefix[:i]
                // 如果最长公共前缀为空，直接返回
                if len(prefix) == 0 {
                    return ""
                }
            }
        }
    }
    
    return prefix
}

func main() {
    strs1 := []string{"flower", "flow", "flight"}
    strs2 := []string{"dog", "racecar", "car"}
    strs3 := []string{"a", "a", "a"}
    strs4 := []string{"abc", "abcd", "abcde"}
    
    fmt.Println(longestCommonPrefix(strs1)) // 输出应该是 "fl"
    fmt.Println(longestCommonPrefix(strs2)) // 输出应该是 ""
    fmt.Println(longestCommonPrefix(strs3)) // 输出应该是 "a"
    fmt.Println(longestCommonPrefix(strs4)) // 输出应该是 "abc"
}

/*题目：  给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一  */
package main

import (
    "fmt"
)

func plusOne(digits []int) []int {
    n := len(digits)
    
    // 从最后一位开始遍历
    for i := n - 1; i >= 0; i-- {
        // 当前位加一
        digits[i]++
        
        // 如果当前位小于10，直接返回结果
        if digits[i] < 10 {
            return digits
        }
        
        // 如果当前位等于10，置为0，并继续处理前一位
        digits[i] = 0
    }
    
    // 如果所有位都处理完后仍然有进位，需要在数组前加一个1
    return append([]int{1}, digits...)
}

func main() {
    digits1 := []int{1, 2, 3}
    digits2 := []int{9, 9, 9}
    digits3 := []int{4, 3, 2, 1}
    digits4 := []int{0}
    
    fmt.Println(plusOne(digits1)) // 输出应该是 [1 2 4]
    fmt.Println(plusOne(digits2)) // 输出应该是 [1 0 0 0]
    fmt.Println(plusOne(digits3)) // 输出应该是 [4 3 2 2]
    fmt.Println(plusOne(digits4)) // 输出应该是 [1]
}

/*题目：删除有序数组中的重复项：给你一个有序数组 nums ，请你原地删除重复出现的元素，
使每个元素只出现一次，返回删除后数组的新长度。不要使用额外的数组空间，
你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。可以使用双指针法，
一个慢指针 i 用于记录不重复元素的位置，一个快指针 j 用于遍历数组，当 nums[i] 与 nums[j] 不相等时，
将 nums[j] 赋值给 nums[i + 1]，并将 i 后移一位。   */
package main

import "fmt"

func removeDuplicates(nums []int) int {
    if len(nums) == 0 {
        return 0
    }
    
    // 慢指针 i 用于记录不重复元素的位置
    i := 0
    
    // 快指针 j 用于遍历数组
    for j := 1; j < len(nums); j++ {
        // 当 nums[i] 与 nums[j] 不相等时
        if nums[j] != nums[i] {
            // 将 nums[j] 赋值给 nums[i + 1]
            nums[i+1] = nums[j]
            // 将 i 后移一位
            i++
        }
    }
    
    // 返回删除后数组的新长度
    return i + 1
}

func main() {
    nums1 := []int{1, 1, 2}
    nums2 := []int{0, 0, 1, 1, 1, 2, 2, 3, 3, 4}
    nums3 := []int{1, 2, 3, 4, 5}
    nums4 := []int{1, 1, 1, 1, 1}
    
    fmt.Println(removeDuplicates(nums1)) // 输出应该是 2, 数组变为 [1 2 ...]
    fmt.Println(removeDuplicates(nums2)) // 输出应该是 5, 数组变为 [0 1 2 3 4 ...]
    fmt.Println(removeDuplicates(nums3)) // 输出应该是 5, 数组变为 [1 2 3 4 5]
    fmt.Println(removeDuplicates(nums4)) // 输出应该是 1, 数组变为 [1]
}

/*题目：合并区间：以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。
请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。
可以先对区间数组按照区间的起始位置进行排序，然后使用一个切片来存储合并后的区间，遍历排序后的区间数组，
将当前区间与切片中最后一个区间进行比较，如果有重叠，则合并区间；如果没有重叠，则将当前区间添加到切片中。  */
package main

import (
    "fmt"
    "sort"
)

// 定义区间结构
type Interval struct {
    Start int
    End   int
}

// 实现排序接口
type ByStart []Interval

func (a ByStart) Len() int           { return len(a) }
func (a ByStart) Less(i, j int) bool { return a[i].Start < a[j].Start }
func (a ByStart) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }

func merge(intervals []Interval) []Interval {
    if len(intervals) == 0 {
        return []Interval{}
    }
    
    // 对区间按照起始位置进行排序
    sort.Sort(ByStart(intervals))
    
    // 使用切片来存储合并后的区间
    merged := []Interval{intervals[0]}
    
    // 遍历排序后的区间数组
    for i := 1; i < len(intervals); i++ {
        // 获取当前区间
        current := intervals[i]
        // 获取最后一个合并后的区间
        lastMerged := &merged[len(merged)-1]
        
        // 检查是否有重叠
        if current.Start <= lastMerged.End {
            // 如果有重叠，合并区间
            if current.End > lastMerged.End {
                lastMerged.End = current.End
            }
        } else {
            // 如果没有重叠，将当前区间添加到合并后的区间切片中
            merged = append(merged, current)
        }
    }
    
    return merged
}

func main() {
    intervals1 := []Interval{{1, 3}, {2, 6}, {8, 10}, {15, 18}}
    intervals2 := []Interval{{1, 4}, {4, 5}}
    intervals3 := []Interval{{1, 2}, {3, 5}, {6, 7}, {8, 9}, {10, 12}}
    intervals4 := []Interval{{1, 4}, {2, 3}}
    
    fmt.Println(merge(intervals1)) // 输出应该是 [{1 6} {8 10} {15 18}]
    fmt.Println(merge(intervals2)) // 输出应该是 [{1 5}]
    fmt.Println(merge(intervals3)) // 输出应该是 [{1 2} {3 5} {6 7} {8 9} {10 12}]
    fmt.Println(merge(intervals4)) // 输出应该是 [{1 4}]
}

/*题目： 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数  */
package main

import (
    "fmt"
)

func twoSum(nums []int, target int) []int {
    // 创建一个哈希表来存储每个数字及其对应的索引
    numMap := make(map[int]int)
    
    // 遍历数组
    for i, num := range nums {
        // 计算目标值与当前数字的差值
        complement := target - num
        
        // 检查差值是否在哈希表中
        if index, found := numMap[complement]; found {
            // 如果找到，返回这两个数字的索引
            return []int{index, i}
        }
        
        // 如果没有找到，将当前数字及其索引添加到哈希表中
        numMap[num] = i
    }
    
    // 如果没有找到满足条件的两个数字，返回空切片
    return []int{}
}

func main() {
    nums1 := []int{2, 7, 11, 15}
    target1 := 9
    nums2 := []int{3, 2, 4}
    target2 := 6
    nums3 := []int{3, 3}
    target3 := 6
    
    fmt.Println(twoSum(nums1, target1)) // 输出应该是 [0 1]
    fmt.Println(twoSum(nums2, target2)) // 输出应该是 [1 2]
    fmt.Println(twoSum(nums3, target3)) // 输出应该是 [0 1]
}

