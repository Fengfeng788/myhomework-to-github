/*只出现一次的数字：给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。
找出那个只出现了一次的元素。可以使用 for 循环遍历数组，结合 if 条件判断和 map 数据结构来解决，
例如通过 map 记录每个元素出现的次数，然后再遍历 map 找到出现次数为1的元素。*/

package main

import "fmt"

func findSingleNumber(nums []int) int {
    countMap := make(map[int]int)
    
    for _, num := range nums {
        countMap[num]++
    }
    
    for num, count := range countMap {
        if count == 1 {
            return num
        }
    }
    
    return 0 // 如果没有找到只出现一次的数字，返回0（根据题意，这种情况不会发生）
}

func main() {
    nums := []int{4, 1, 2, 1, 2}
    fmt.Println(findSingleNumber(nums)) // 输出应该是 4
}


